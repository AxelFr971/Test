const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üîë Configuration Interactive des Cl√©s Xirsys\n');

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function configureXirsys() {
  try {
    console.log('üìã Veuillez fournir vos informations Xirsys:');
    console.log('   (Disponibles sur: https://xirsys.com/dashboard)\n');

    const secretId = await askQuestion('üîπ Username Xirsys (secretId): ');
    const secretToken = await askQuestion('üîπ Secret Xirsys (secretToken): ');
    const appName = await askQuestion('üîπ Nom de votre application Xirsys: ');

    if (!secretId || !secretToken || !appName) {
      console.log('‚ùå Toutes les informations sont requises.');
      process.exit(1);
    }

    const url = `https://global.xirsys.net/_turn/${appName}`;

    const config = `// Configuration priv√©e - NE PAS COMMITER
// Ce fichier contient des informations sensibles

module.exports = {
  xirsys: {
    secretId: '${secretId}',
    secretToken: '${secretToken}',
    url: '${url}',
    
    // Configuration optionnelle
    options: {
      format: 'urls',
      iceTransportPolicy: 'all'
    }
  },
  
  // Autres configurations sensibles peuvent √™tre ajout√©es ici
  server: {
    // Cl√©s SSL personnalis√©es si n√©cessaire
    // sslKey: '',
    // sslCert: ''
  }
};`;

    // Cr√©er le dossier config s'il n'existe pas
    const configDir = path.join(__dirname, '..', 'config');
    if (!fs.existsSync(configDir)) {
      fs.mkdirSync(configDir, { recursive: true });
    }

    // √âcrire le fichier de configuration
    const configPath = path.join(configDir, 'secrets.js');
    fs.writeFileSync(configPath, config);

    console.log('\n‚úÖ Configuration Xirsys sauvegard√©e !');
    console.log(`üìÅ Fichier: ${configPath}`);
    console.log('\nüß™ Test de la configuration...');

    // Tester la configuration
    try {
      const XirsysService = require('../lib/xirsys');
      const secrets = require('../config/secrets');
      const xirsysService = new XirsysService(secrets.xirsys);
      
      const testResult = await xirsysService.testConnection();
      
      if (testResult) {
        console.log('‚úÖ Test Xirsys: Connexion r√©ussie !');
        console.log('üéâ Votre configuration Xirsys est op√©rationnelle.');
      } else {
        console.log('‚ùå Test Xirsys: √âchec de connexion');
        console.log('‚ö†Ô∏è  V√©rifiez vos cl√©s et r√©essayez.');
      }
    } catch (error) {
      console.log('‚ùå Erreur lors du test:', error.message);
      console.log('üí° L\'application utilisera les serveurs STUN publics en fallback.');
    }

    console.log('\nüöÄ Vous pouvez maintenant d√©marrer l\'application:');
    console.log('   npm start');

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// V√©rifier si le fichier existe d√©j√†
const configPath = path.join(__dirname, '..', 'config', 'secrets.js');
if (fs.existsSync(configPath)) {
  console.log('‚ö†Ô∏è  Le fichier config/secrets.js existe d√©j√†.');
  rl.question('Voulez-vous le remplacer ? (y/N): ', (answer) => {
    if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
      configureXirsys();
    } else {
      console.log('Configuration annul√©e.');
      rl.close();
    }
  });
} else {
  configureXirsys();
}